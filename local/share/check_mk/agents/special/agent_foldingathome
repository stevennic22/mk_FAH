#!/usr/bin/env python3
# -*- coding: utf-8 -*-#

import time, sys, telnetlib, argparse

# Enable debug output
debug = False

def format_duration(dur):
  d = dur // (24*3600)
  dur -= d*24*3600
  h = dur // 3600
  dur -= h*3600
  m = dur // 60
  dur -= m*60
  s = dur
  if d > 0:
    return "%02.0fd%02.0fh" % (d, h)
  else:
    return "%02.0f:%02.0f:%02.0f" % (h, m, s)

def parse_duration(dur):
  d = 0.
  for t in dur.split():
    if t == 'days':
      return d*24.*3600.
    elif t == 'hours':
      d *= 60.
    elif t == 'mins':
      d *= 60.
    elif t == 'secs':
      pass
    else:
      d += float(t)
  return d

# Class to handle client information and connections
class FAHClients:
  def __init__(self, ip, port, timeout, auth):
    self.ip = ip
    self.port = port
    self.timeout = timeout
    self.host_ppd = 0
    self.auth = auth

  #Class function to gather and print agent information
  def print_header(self):
    print('<<<check_mk>>>')

    print("AgentOS: telnetlib-{0}".format(sys.version.split(" ")[0]))
    print(self.parse_version())
    print('<<<foldingathome>>>')

  #Class function to parse and print version info from connect_to_server output
  def parse_version(self):
    if hasattr(self, "info"):
      if 'Version' in self.info[1][1]:
        return("Version: " + str(self.info[1][1][1]))
      else:
        for x in self.info:
          if "FAHClient" in x:
            for y in x:
              if "Version" in y:
                return("Version: " + str(y[1]))
    else:
      return("Version: Unknown")

  #Class function to gather queue information and handle connection to servers
  def connect_to_server(self):
    try:
      x = 0
      while x < 2:
        self.tn = telnetlib.Telnet(self.ip, self.port, self.timeout)
        if debug:
          print("\nConnecting...")
          self.tn.set_debuglevel(100)

        buftest = self.tn.read_until(b'Welcome to the FAHClient command server.\n> ', self.timeout).decode('utf-8')
        if "FAHClient" not in buftest:
          self.tn.write(b'exit\n')
          self.tn.close()
          x += 1
          continue

        if hasattr(self, 'auth') and self.auth is not None:
          self.tn.write('auth {0}\n'.format(self.auth).encode())
          passbuf = self.tn.read_until(b'\n>', self.timeout).decode('utf-8')
          if "FAILED" in passbuf:
            raise ValueError("Invalid Credentials")

        #Gather FAHClient info
        self.tn.write(b'info\n')
        infobuf = self.tn.read_until(b'---\n', self.timeout).decode('utf-8')
        self.info = eval(infobuf.split('PyON 1 info\n')[1].split('\n---\n')[0])

        #Gather slot info
        self.tn.write(b'slot-info\n')
        slotbuf = self.tn.read_until(b'---\n', self.timeout).decode('utf-8')
        self.slots = eval(slotbuf.split('PyON 1 slots\n')[1].split('\n---\n')[0])

        #Gather queue info
        self.tn.write(b'queue-info\n')
        bufdec = self.tn.read_until(b'---\n>', self.timeout).decode('utf-8')
        self.tn.write(b'exit\n')
        self.tn.close()

        #Break from while loop if queue output is > 0
        if len(bufdec.split('PyON 1 units\n')) > 1:
          self.queue = eval(bufdec.split('PyON 1 units\n')[1].split('\n---\n')[0])
          if len(self.queue) > 0:
            break

        x += 1

      else:
        if not hasattr(self, "queue"):
          raise(TimeoutError)

    except TimeoutError:
      self.error = "Error: Timeout, Cannot retrieve information"

    except ValueError:
      self.error = "Error: Invalid credentials"

    except:
      if debug:
        print(sys.exc_info())
      self.error = "Error: Unknown error, Cannot connect"

  #Parses the information for each host
  def parse_ppd_info(self):
    for i in self.queue:
      #Store targeted information from queue based on state
      if i['state'] == 'RUNNING':
        self.host_ppd += int(i['ppd'])

def parse_arguments(argv):
  def positive_int(num):
    val = int(num)
    if val < 0:
      raise ValueError
    return(val)

  parser = argparse.ArgumentParser(description="A tool to print Folding@Home slot/PPD data", add_help=False, formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=27))

  required_param_group = parser.add_argument_group('required arguments')
  required_param_group.add_argument('-i', '--ip', type=str, default="localhost", metavar="10.10.10.7", help='Hostname or IP-address of Folding@Home server')
  required_param_group.add_argument('-p', '--port', type=positive_int, default=36330, metavar="36330", help='Port for Folding Telnet server')
  parser.add_argument('-a', '--auth', type=str, default=None, metavar="password", help="password/credentials for telnet connection")
  parser.add_argument('-h', '--help', action='store_true', help="print this help message and exit")
  parser.add_argument('-t', '--timeout', type=positive_int, default=15, metavar="30", help='Set the network timeout for the Folding@Home connection to TIMEOUT seconds.')
  parser.add_argument('-d', '--debug', default=False, action='store_true')

  args = parser.parse_args()

  if args.debug:
    print(args)

  if args.auth == "":
    args.auth = None

  if args.help:
    parser.print_help()
    exit()

  return(args)

def main(argv):
  args = parse_arguments(argv)
  global debug
  debug = args.debug

  total_ppd = 0
  host = FAHClients(args.ip, args.port, args.timeout, args.auth)

  host.connect_to_server()
  host.print_header()

  #Skip parsing information if no information to parse.
  if hasattr(host, "error"):
    print(host.error)
    print("P: {{'T': {0}}}".format(total_ppd))
    exit()

  for slot in host.slots:
    print('[[' + slot['id'] + ']]')
    print("S: {0}".format(slot))
    for wu in host.queue:
      if slot['id'] != wu['slot']:
        continue
      print("W: {0}".format(wu))

      if wu['state'] == "RUNNING":
        print("P: {{'{0}': {1}}}".format(slot['id'] , wu['ppd']))

  host.parse_ppd_info()

  total_ppd += host.host_ppd

  print("P: {{'T': {0}}}".format(total_ppd))

if __name__ == "__main__":
  main(sys.argv[1:])
